{"version":3,"file":"fallback-local-storage.cjs","sources":["../src/index.mjs"],"sourcesContent":["const getGlobal = function () {\n  if (typeof self !== \"undefined\") {\n    // eslint-disable-next-line no-undef\n    return self;\n  }\n  if (typeof window !== \"undefined\") {\n    // eslint-disable-next-line no-undef\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  throw new Error(\"unable to locate global object\");\n};\n\nlet theGlobal = getGlobal();\n\nfunction cloneDeep(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction isMap(value) {\n  return value && (value instanceof Map || value.constructor.name === \"Map\");\n}\n\nfunction isSet(value) {\n  return value && (value instanceof Set || value.constructor.name === \"Set\");\n}\n\nfunction isKeyed(value) {\n  return isMap(value) || isSet(value);\n}\n\nfunction keyedToObject(keyed) {\n  if (!isKeyed(keyed)) {\n    return keyed;\n  }\n  if (isSet(keyed)) {\n    return Array.from(keyed).map((value) => (isKeyed(value) ? keyedToObject(value) : value));\n  }\n  const object = {};\n  keyed.forEach((value, key) => {\n    if (isKeyed(value)) {\n      object[key] = keyedToObject(value);\n    } else {\n      object[key] = value;\n    }\n  });\n  return object;\n}\n\n/**\n * Trying to parse or stringify JSON, do not throws errors\n * @class Serializer\n */\nclass Serializer {\n  constructor(debug = false) {\n    Object.defineProperty(this, \"_debug\", {\n      value: Boolean(debug),\n      writable: true,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  deserialize(value, defaults) {\n    let result = defaults;\n    const type = typeof value;\n    if (!value) {\n      if (this._debug) {\n        console.warn(\"Unable to parse scalar or empty values\");\n        console.dir(value);\n      }\n      return result;\n    }\n    if (type === \"object\") {\n      if (this._debug) {\n        console.warn(\"It looks like value is already parsed\");\n        console.dir(value);\n      }\n      return value;\n    }\n    if (type !== \"string\") {\n      if (this._debug) {\n        console.warn(\"Unable to parse non-string values\");\n        console.dir(value);\n      }\n      return result;\n    }\n    try {\n      result = JSON.parse(value);\n    } catch (exception) {\n      if (this._debug) {\n        console.warn(\"Unable to parse serialized data\");\n        console.dir(value);\n        console.dir(exception);\n      }\n    }\n    return result;\n  }\n\n  // noinspection Eslint\n  /**\n   * @param {*} value\n   * @returns {string}\n   */\n  serialize(value) {\n    if (!value) {\n      return JSON.stringify(value);\n    }\n    if (typeof value !== \"object\") {\n      return JSON.stringify(value);\n    }\n    if (Array.isArray(value)) {\n      return JSON.stringify(value);\n    }\n    return JSON.stringify(keyedToObject(value));\n  }\n}\n\n/**\n * A fallback interface imitation of the Web Storage API.\n * @class FallbackStorage\n */\nclass FallbackStorage {\n  constructor() {\n    this._data = {};\n  }\n\n  setItem(key, value) {\n    if (!key) {\n      return;\n    }\n    this._data[`${key}`] = `${value}`;\n  }\n\n  getItem(key) {\n    if (key in this._data) {\n      return cloneDeep(this._data[key]);\n    }\n    return null;\n  }\n\n  hasItem(key) {\n    return key in this._data;\n  }\n\n  removeItem(key) {\n    if (key in this._data) {\n      delete this._data[key];\n    }\n  }\n\n  key(key) {\n    const keys = Object.keys(this._data);\n    if (key in keys) {\n      return cloneDeep(keys[key]);\n    }\n    return null;\n  }\n\n  clear() {\n    this._data = {};\n  }\n\n  get length() {\n    return Object.keys(this._data).length;\n  }\n\n  set length(value) {\n    Object.keys(this._data).length;\n  }\n\n  keys() {\n    return Object.keys(this._data);\n  }\n\n  values() {\n    return Object.values(cloneDeep(this._data));\n  }\n\n  entries() {\n    return Object.entries(cloneDeep(this._data));\n  }\n\n  toString() {\n    return JSON.stringify(this._data);\n  }\n\n  valueOf() {\n    return cloneDeep(this._data);\n  }\n\n  toJSON() {\n    return cloneDeep(this._data);\n  }\n}\n\n/**\n * @class FallbackLocalStorage\n */\nclass FallbackLocalStorage {\n  /**\n   * @type {\"FallbackLocalStorage\"}\n   * @static\n   */\n  static get NAME() {\n    return \"FallbackLocalStorage\";\n  }\n  /**\n   * @type {string}\n   * @static\n   */\n  static get VERSION() {\n    return \"0.0.22\";\n  }\n\n  /**\n   * @constructor\n   * @param {boolean} [debug=false] - Toggle debug information output.\n   * @param {boolean} [iterable=false] - Allow iteration over instance. Disable if you don't want be compatible with\n   * localStorage.\n   * @param {boolean} [autoSerialize=false] - Serialize data before save and retrieve. VERY RECOMMENDED.\n   * @param {(Function|Object)} [CustomSerializer=null] - Custom serializer for values.\n   * @public\n   */\n  constructor(debug = false, iterable = false, autoSerialize = true, CustomSerializer = null) {\n    Object.defineProperty(this, \"_debug\", {\n      value: Boolean(debug),\n      writable: true,\n      configurable: false,\n      enumerable: false,\n    });\n    Object.defineProperty(this, \"_iterable\", {\n      value: Boolean(iterable),\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n    Object.defineProperty(this, \"_serialize\", {\n      value: Boolean(autoSerialize),\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n    Object.defineProperty(this, \"_serializer\", {\n      value: (function _serializer(_this) {\n        if (!CustomSerializer) {\n          return new Serializer(_this._debug);\n        } else if (typeof CustomSerializer === \"function\") {\n          return new CustomSerializer(_this._debug);\n        } else if (typeof CustomSerializer === \"object\") {\n          return CustomSerializer;\n        }\n        return new Serializer(_this._debug);\n      })(this),\n      writable: false,\n      configurable: false,\n      enumerable: false,\n    });\n    let storage = {};\n    const storageAvailable = FallbackLocalStorage.getStorage();\n    switch (true) {\n      case storageAvailable.indexOf(\"localStorage\") > -1:\n        storage = theGlobal.localStorage;\n        if (this._debug) {\n          console.info(\"FallbackLocalStorage. Start using [localStorage].\");\n        }\n        break;\n      case storageAvailable.indexOf(\"sessionStorage\") > -1:\n        storage = theGlobal.sessionStorage;\n        if (this._debug) {\n          console.warn(\"FallbackLocalStorage. Start using [sessionStorage].\");\n        }\n        break;\n      default:\n        storage = new FallbackStorage();\n        if (this._debug) {\n          console.warn(\"FallbackLocalStorage. Start using [fallbackStorage].\");\n        }\n        break;\n    }\n    Object.defineProperty(this, \"_storage\", {\n      value: storage,\n      writable: true,\n      configurable: false,\n      enumerable: false,\n    });\n  }\n\n  /**\n   * @name getStorage\n   * @description Return list of available storage. Can return `localStorage`, `sessionStorage` and `fallbackStorage`.\n   * Will always return at least `fallbackStorage`.\n   * @public\n   * @returns {Array.<\"localStorage\"|\"sessionStorage\"|\"fallbackStorage\">} Available storage locations\n   * @example FallbackLocalStorage.getStorage() // [\"localStorage\", \"fallbackStorage\"]\n   * @static\n   */\n  static getStorage() {\n    const storage = [];\n    try {\n      if (typeof theGlobal.localStorage !== \"undefined\") {\n        try {\n          theGlobal.localStorage.setItem(\"\", \"\");\n          storage.push(\"localStorage\");\n        } catch (error) {\n          //\n        }\n      }\n    } catch (error) {\n      //\n    }\n    try {\n      if (typeof theGlobal.sessionStorage !== \"undefined\") {\n        try {\n          theGlobal.sessionStorage.setItem(\"\", \"\");\n          storage.push(\"sessionStorage\");\n        } catch (error) {\n          //\n        }\n      }\n    } catch (error) {\n      //\n    }\n    storage.push(\"fallbackStorage\");\n    return storage;\n  }\n\n  /**\n   * @name toString\n   * @description Stringifies storage contents.\n   * @public\n   * @returns {string}\n   */\n  toString() {\n    return JSON.stringify(this._storage);\n  }\n\n  /**\n   * @name toJSON\n   * @description Returns FallbackLocalStorage or stringified localStorage/sessionStorage.\n   * @public\n   * @returns {*}\n   */\n  toJSON() {\n    if (\"toJSON\" in this._storage && typeof this._storage.toJSON === \"function\") {\n      return this._storage.toJSON();\n    }\n    return JSON.stringify(this._storage);\n  }\n\n  /**\n   * @name toStringTag\n   * @description Returns FallbackLocalStorage instance as a string.\n   * @public\n   * @returns {string}\n   */\n  toStringTag() {\n    return this.toString();\n  }\n\n  /**\n   * @name getItem\n   * @description When passed a key name, will return that key's value if storage has an item at that key.\n   * Otherwise it returns defaults, the optional second param (null if not provided).\n   * @public\n   * @param {string} name - The name of the key you want to retrieve the value of.\n   * @param {*} [defaults=null] - Default value to return if no item found at key name.\n   * @returns {*}\n   * @example fallbackStorage.getItem(\"email\") // \"person@example.org\"\n   */\n  getItem(name, defaults = null) {\n    const strName = `${name}`;\n    if (!this.hasItem(strName)) {\n      return defaults;\n    }\n    if (!this._serialize) {\n      return this._storage.getItem(strName);\n    }\n    return this._serializer.deserialize(this._storage.getItem(strName));\n  }\n\n  /**\n   * @name setItem\n   * @description When passed a key name and value, will add that key to the storage,\n   * or update that key's value if it already exists.\n   * @public\n   * @param {string} name - The key to create or update.\n   * @param {*} value - Value to store at the given key.\n   * @returns {boolean} Was operation successful\n   * @example appStorage.setItem(\"hash\", { name: \"John\" })\n   */\n  setItem(name, value) {\n    const strName = `${name}`;\n    let setValue;\n    if (this._serialize) {\n      setValue = this._serializer.serialize(value);\n    } else {\n      if (this._debug && typeof value !== \"string\") {\n        console.warn(`Value for key \"${strName}\" will be converted to string: \"${value}\"`);\n      }\n      setValue = `${value}`;\n    }\n    let returnState = true;\n    try {\n      this._storage.setItem(strName, setValue);\n    } catch (error) {\n      returnState = `Device exceeded storage data limit or encounter error.\\n${error}`;\n      if (this._debug) {\n        console.warn(returnState);\n      }\n    }\n    if (this._iterable) {\n      this[strName] = setValue;\n    }\n    return returnState;\n  }\n\n  /**\n   * @name hasItem\n   * @description Check if key exists in storage.\n   * @public\n   * @param {string} name - Key to check\n   * @returns {boolean}\n   * @example fallbackStorage.hasItem('email') // true\n   */\n  hasItem(name) {\n    const strName = `${name}`;\n    if (typeof this._storage.hasItem === \"function\") {\n      return this._storage.hasItem(strName);\n    }\n    return strName in this._storage && !(strName in theGlobal.Storage.prototype);\n  }\n\n  /**\n   * @name removeItem\n   * @description Removes the given key from storage.\n   * @public\n   * @param {string} name - Key to remove\n   * @example fallbackStorage.removeItem('email')\n   */\n  removeItem(name) {\n    const strName = `${name}`;\n    if (this.hasItem(strName)) {\n      if (this._iterable) {\n        delete this[strName];\n      }\n      this._storage.removeItem(strName);\n    }\n  }\n\n  /**\n   * @name clear\n   * @description Empties all keys out of the storage.\n   * @public\n   * @example fallbackStorage.clear()\n   */\n  clear() {\n    if (this._iterable) {\n      Object.keys(this).forEach((name) => delete this[name]);\n    }\n    this._storage.clear();\n  }\n\n  /**\n   * @name: key\n   * @description Returns the name of the nth key in the storage. This is a zero-based index.\n   * @public\n   * @param {number} key - An integer representing the number of the key you want to get the name of.\n   * @returns {*}\n   */\n  key(key) {\n    if (!this._serialize) {\n      if (typeof this._storage.key === \"function\") {\n        return this._storage.key(key);\n      }\n      if (key in this.values()) {\n        return this.values()[key];\n      }\n      return null;\n    }\n    let value = null;\n    if (typeof this._storage.key === \"function\") {\n      value = this._storage.key(key);\n    } else if (key in this.values()) {\n      value = this.values()[key];\n    }\n    return this._serializer.deserialize(value);\n  }\n\n  /**\n   * @name item\n   * @description Returns value at key. If a second argument is provided, it will be set as that key's value and\n   * returned.\n   * @public\n   * @param {...*} args - Key name and (optional) value to store at that key\n   * @returns {*} Value at the given key\n   */\n  item(...args) {\n    if (!args.length || args.length > 2) {\n      return null;\n    }\n    if (args.length === 1) {\n      return this.getItem(args[0]);\n    }\n    this.setItem(args[0], args[1]);\n    return this.getItem(args[0]);\n  }\n\n  /**\n   * @name keys\n   * @description Returns an array of keys saved in storage.\n   * @public\n   * @returns {Array.<string>} Key names\n   */\n  keys() {\n    if (typeof this._storage.keys === \"function\") {\n      return this._storage.keys();\n    }\n    return Object.keys(this._storage);\n  }\n\n  /**\n   * @name values\n   * @description Returns an array of values saved in storage.\n   * @public\n   * @returns {Array}\n   */\n  values() {\n    if (!this._serialize) {\n      if (typeof this._storage.values === \"function\") {\n        return this._storage.values();\n      }\n      return Object.values(this._storage);\n    }\n    let values;\n    if (typeof this._storage.values === \"function\") {\n      values = this._storage.values();\n    } else {\n      values = Object.values(this._storage);\n    }\n    return values.map((value) => this._serializer.deserialize(value));\n  }\n\n  /**\n   * @name entries\n   * @description Returns an array of [key,value] pairs for all storage items.\n   * @public\n   * @returns {Array.<Object<string, *>>}\n   */\n  entries() {\n    if (!this._serialize) {\n      if (typeof this._storage.entries === \"function\") {\n        return this._storage.entries();\n      }\n      return Object.entries(this._storage);\n    }\n    let entries;\n    if (typeof this._storage.entries === \"function\") {\n      entries = this._storage.entries();\n    } else {\n      entries = Object.entries(this._storage);\n    }\n    return entries.map((entry) => {\n      const newEntry = [];\n      newEntry[0] = entry[0];\n      newEntry[1] = this._serializer.deserialize(entry[1]);\n      return newEntry;\n    });\n  }\n\n  /**\n   * @name forEach\n   * @description Executes a provided function once per array element.\n   * @public\n   * @param {Function} callback - Function applied to each stored value\n   * @param {Object=} thisArg - If no `this` arg is provided, `this` will be replaced with the global object\n   */\n  forEach(callback, thisArg) {\n    const keys = this.keys();\n    if (!keys.length) {\n      return;\n    }\n    if (typeof callback !== \"function\") {\n      return;\n    }\n    if (this._serialize === false && typeof this._storage.forEach === \"function\") {\n      this._storage.forEach.call(thisArg, callback);\n    }\n    this.entries().forEach((value, key) => callback.call(thisArg, value, key));\n  }\n\n  /**\n   * @name length\n   * @description Returns an integer representing the number of data items stored in the object.\n   * @returns {number}\n   */\n  get length() {\n    return this.keys().length;\n  }\n\n  /**\n   * @param {Number} value\n   */\n  set length(value) {\n    this.keys().length;\n  }\n}\n\nexport default FallbackLocalStorage;\n"],"names":["theGlobal","self","window","global","Error","getGlobal","cloneDeep","obj","JSON","parse","stringify","isSet","value","Set","constructor","name","isKeyed","isMap","Map","Serializer","debug","Object","defineProperty","this","Boolean","writable","configurable","enumerable","deserialize","defaults","result","type","_debug","console","warn","dir","exception","serialize","Array","isArray","keyedToObject","keyed","from","map","object","forEach","key","FallbackStorage","_data","setItem","getItem","hasItem","removeItem","keys","clear","length","values","entries","toString","valueOf","toJSON","FallbackLocalStorage","iterable","autoSerialize","CustomSerializer","_serializer","_this","storage","storageAvailable","getStorage","indexOf","localStorage","info","sessionStorage","push","error","_storage","toStringTag","strName","_serialize","setValue","returnState","_iterable","Storage","prototype","item","args","entry","newEntry","callback","thisArg","call"],"mappings":"aAeA,IAAIA,EAfc,cACI,oBAATC,YAEFA,QAEa,oBAAXC,cAEFA,UAEa,oBAAXC,cACFA,aAEH,IAAIC,MAAM,kCAGFC,GAEhB,SAASC,UAAUC,UACVC,KAAKC,MAAMD,KAAKE,UAAUH,IAOnC,SAASI,MAAMC,UACNA,IAAUA,aAAiBC,KAAkC,QAA3BD,EAAME,YAAYC,MAG7D,SAASC,QAAQJ,UARjB,SAASK,MAAML,UACNA,IAAUA,aAAiBM,KAAkC,QAA3BN,EAAME,YAAYC,MAQpDE,CAAML,IAAUD,MAAMC,GAyB/B,MAAMO,WACJL,YAAYM,GAAQ,GAClBC,OAAOC,eAAeC,KAAM,SAAU,CACpCX,MAAOY,QAAQJ,GACfK,UAAU,EACVC,cAAc,EACdC,YAAY,IAIhBC,YAAYhB,EAAOiB,OACbC,EAASD,QACPE,SAAcnB,MACfA,SACCW,KAAKS,SACPC,QAAQC,KAAK,0CACbD,QAAQE,IAAIvB,IAEPkB,KAEI,WAATC,SACER,KAAKS,SACPC,QAAQC,KAAK,yCACbD,QAAQE,IAAIvB,IAEPA,KAEI,WAATmB,SACER,KAAKS,SACPC,QAAQC,KAAK,qCACbD,QAAQE,IAAIvB,IAEPkB,MAGPA,EAAStB,KAAKC,MAAMG,GACpB,MAAOwB,GACHb,KAAKS,SACPC,QAAQC,KAAK,mCACbD,QAAQE,IAAIvB,GACZqB,QAAQE,IAAIC,WAGTN,EAQTO,UAAUzB,UACHA,EAGgB,iBAAVA,GAGP0B,MAAMC,QAAQ3B,GAFTJ,KAAKE,UAAUE,GAKjBJ,KAAKE,UAnFhB,SAAS8B,cAAcC,OAChBzB,QAAQyB,UACJA,KAEL9B,MAAM8B,UACDH,MAAMI,KAAKD,GAAOE,IAAK/B,GAAWI,QAAQJ,GAAS4B,cAAc5B,GAASA,SAE7EgC,EAAS,UACfH,EAAMI,QAAQ,CAACjC,EAAOkC,KAChB9B,QAAQJ,GACVgC,EAAOE,GAAON,cAAc5B,GAE5BgC,EAAOE,GAAOlC,IAGXgC,EAoEiBJ,CAAc5B,IAR3BJ,KAAKE,UAAUE,IAgB5B,MAAMmC,gBACJjC,mBACOkC,MAAQ,GAGfC,QAAQH,EAAKlC,GACNkC,SAGAE,MAAO,GAAEF,GAAU,GAAElC,GAG5BsC,QAAQJ,UACFA,KAAOvB,KAAKyB,MACP1C,UAAUiB,KAAKyB,MAAMF,IAEvB,KAGTK,QAAQL,UACCA,KAAOvB,KAAKyB,MAGrBI,WAAWN,GACLA,KAAOvB,KAAKyB,cACPzB,KAAKyB,MAAMF,GAItBA,IAAIA,SACIO,EAAOhC,OAAOgC,KAAK9B,KAAKyB,cAC1BF,KAAOO,EACF/C,UAAU+C,EAAKP,IAEjB,KAGTQ,aACON,MAAQ,uBAIN3B,OAAOgC,KAAK9B,KAAKyB,OAAOO,kBAGtB3C,GACTS,OAAOgC,KAAK9B,KAAKyB,OAAOO,OAG1BF,cACShC,OAAOgC,KAAK9B,KAAKyB,OAG1BQ,gBACSnC,OAAOmC,OAAOlD,UAAUiB,KAAKyB,QAGtCS,iBACSpC,OAAOoC,QAAQnD,UAAUiB,KAAKyB,QAGvCU,kBACSlD,KAAKE,UAAUa,KAAKyB,OAG7BW,iBACSrD,UAAUiB,KAAKyB,OAGxBY,gBACStD,UAAUiB,KAAKyB,QAO1B,MAAMa,6CAMK,kDAOA,SAYT/C,YAAYM,GAAQ,EAAO0C,GAAW,EAAOC,GAAgB,EAAMC,EAAmB,MACpF3C,OAAOC,eAAeC,KAAM,SAAU,CACpCX,MAAOY,QAAQJ,GACfK,UAAU,EACVC,cAAc,EACdC,YAAY,IAEdN,OAAOC,eAAeC,KAAM,YAAa,CACvCX,MAAOY,QAAQsC,GACfrC,UAAU,EACVC,cAAc,EACdC,YAAY,IAEdN,OAAOC,eAAeC,KAAM,aAAc,CACxCX,MAAOY,QAAQuC,GACftC,UAAU,EACVC,cAAc,EACdC,YAAY,IAEdN,OAAOC,eAAeC,KAAM,cAAe,CACzCX,MAAQ,SAASqD,YAAYC,UACtBF,EAEkC,mBAArBA,EACT,IAAIA,EAAiBE,EAAMlC,QACG,iBAArBgC,EACTA,EAEF,IAAI7C,WAAW+C,EAAMlC,QANnB,IAAIb,WAAW+C,EAAMlC,QAFxB,CASLT,MACHE,UAAU,EACVC,cAAc,EACdC,YAAY,QAEVwC,EAAU,SACRC,EAAmBP,qBAAqBQ,qBACtC,QACDD,EAAiBE,QAAQ,iBAAmB,EAC/CH,EAAUnE,EAAUuE,aAChBhD,KAAKS,QACPC,QAAQuC,KAAK,gEAGZJ,EAAiBE,QAAQ,mBAAqB,EACjDH,EAAUnE,EAAUyE,eAChBlD,KAAKS,QACPC,QAAQC,KAAK,qEAIfiC,EAAU,IAAIpB,gBACVxB,KAAKS,QACPC,QAAQC,KAAK,wDAInBb,OAAOC,eAAeC,KAAM,WAAY,CACtCX,MAAOuD,EACP1C,UAAU,EACVC,cAAc,EACdC,YAAY,8BAcRwC,EAAU,eAEwB,IAA3BnE,EAAUuE,iBAEjBvE,EAAUuE,aAAatB,QAAQ,GAAI,IACnCkB,EAAQO,KAAK,gBACb,MAAOC,KAIX,MAAOA,gBAIiC,IAA7B3E,EAAUyE,mBAEjBzE,EAAUyE,eAAexB,QAAQ,GAAI,IACrCkB,EAAQO,KAAK,kBACb,MAAOC,KAIX,MAAOA,WAGTR,EAAQO,KAAK,mBACNP,EASTT,kBACSlD,KAAKE,UAAUa,KAAKqD,UAS7BhB,eACM,WAAYrC,KAAKqD,UAA4C,mBAAzBrD,KAAKqD,SAAShB,OAC7CrC,KAAKqD,SAAShB,SAEhBpD,KAAKE,UAAUa,KAAKqD,UAS7BC,qBACStD,KAAKmC,WAadR,QAAQnC,EAAMc,EAAW,YACjBiD,EAAW,GAAE/D,SACdQ,KAAK4B,QAAQ2B,GAGbvD,KAAKwD,WAGHxD,KAAK0C,YAAYrC,YAAYL,KAAKqD,SAAS1B,QAAQ4B,IAFjDvD,KAAKqD,SAAS1B,QAAQ4B,GAHtBjD,EAkBXoB,QAAQlC,EAAMH,SACNkE,EAAW,GAAE/D,MACfiE,EACAzD,KAAKwD,WACPC,EAAWzD,KAAK0C,YAAY5B,UAAUzB,IAElCW,KAAKS,QAA2B,iBAAVpB,GACxBqB,QAAQC,KAAM,kBAAiB4C,oCAA0ClE,MAE3EoE,EAAY,GAAEpE,OAEZqE,GAAc,WAEXL,SAAS3B,QAAQ6B,EAASE,GAC/B,MAAOL,GACPM,EAAe,2DAA0DN,EACrEpD,KAAKS,QACPC,QAAQC,KAAK+C,UAGb1D,KAAK2D,iBACFJ,GAAWE,GAEXC,EAWT9B,QAAQpC,SACA+D,EAAW,GAAE/D,QACkB,mBAA1BQ,KAAKqD,SAASzB,QAChB5B,KAAKqD,SAASzB,QAAQ2B,GAExBA,KAAWvD,KAAKqD,YAAcE,KAAW9E,EAAUmF,QAAQC,WAUpEhC,WAAWrC,SACH+D,EAAW,GAAE/D,EACfQ,KAAK4B,QAAQ2B,KACXvD,KAAK2D,kBACA3D,KAAKuD,QAETF,SAASxB,WAAW0B,IAU7BxB,QACM/B,KAAK2D,WACP7D,OAAOgC,KAAK9B,MAAMsB,QAAS9B,UAAgBQ,KAAKR,SAE7C6D,SAAStB,QAUhBR,IAAIA,OACGvB,KAAKwD,iBACyB,mBAAtBxD,KAAKqD,SAAS9B,IAChBvB,KAAKqD,SAAS9B,IAAIA,GAEvBA,KAAOvB,KAAKiC,SACPjC,KAAKiC,SAASV,GAEhB,SAELlC,EAAQ,WACqB,mBAAtBW,KAAKqD,SAAS9B,IACvBlC,EAAQW,KAAKqD,SAAS9B,IAAIA,GACjBA,KAAOvB,KAAKiC,WACrB5C,EAAQW,KAAKiC,SAASV,IAEjBvB,KAAK0C,YAAYrC,YAAYhB,GAWtCyE,QAAQC,UACDA,EAAK/B,QAAU+B,EAAK/B,OAAS,EACzB,MAEW,IAAhB+B,EAAK/B,aAGJN,QAAQqC,EAAK,GAAIA,EAAK,IAFlB/D,KAAK2B,QAAQoC,EAAK,KAY7BjC,aACoC,mBAAvB9B,KAAKqD,SAASvB,KAChB9B,KAAKqD,SAASvB,OAEhBhC,OAAOgC,KAAK9B,KAAKqD,UAS1BpB,aACOjC,KAAKwD,iBAC4B,mBAAzBxD,KAAKqD,SAASpB,OAChBjC,KAAKqD,SAASpB,SAEhBnC,OAAOmC,OAAOjC,KAAKqD,cAExBpB,SAEFA,EADkC,mBAAzBjC,KAAKqD,SAASpB,OACdjC,KAAKqD,SAASpB,SAEdnC,OAAOmC,OAAOjC,KAAKqD,UAEvBpB,EAAOb,IAAK/B,GAAUW,KAAK0C,YAAYrC,YAAYhB,IAS5D6C,cACOlC,KAAKwD,iBAC6B,mBAA1BxD,KAAKqD,SAASnB,QAChBlC,KAAKqD,SAASnB,UAEhBpC,OAAOoC,QAAQlC,KAAKqD,cAEzBnB,SAEFA,EADmC,mBAA1BlC,KAAKqD,SAASnB,QACblC,KAAKqD,SAASnB,UAEdpC,OAAOoC,QAAQlC,KAAKqD,UAEzBnB,EAAQd,IAAK4C,UACZC,EAAW,UACjBA,EAAS,GAAKD,EAAM,GACpBC,EAAS,GAAKjE,KAAK0C,YAAYrC,YAAY2D,EAAM,IAC1CC,IAWX3C,QAAQ4C,EAAUC,GACHnE,KAAK8B,OACRE,QAGc,mBAAbkC,KAGa,IAApBlE,KAAKwD,YAAyD,mBAA1BxD,KAAKqD,SAAS/B,cAC/C+B,SAAS/B,QAAQ8C,KAAKD,EAASD,QAEjChC,UAAUZ,QAAQ,CAACjC,EAAOkC,IAAQ2C,EAASE,KAAKD,EAAS9E,EAAOkC,yBAS9DvB,KAAK8B,OAAOE,kBAMV3C,QACJyC,OAAOE"}